!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);class n{static getObjectWithName(t){return document.getElementById(t)}static switchVisibility(t,e){"none"==t.style.display?(t.style.display="block",e.style.display="none"):(e.style.display="block",t.style.display="none")}}class s{static initialize(){null==this.startContainer&&(this.startContainer=n.getObjectWithName("start-container"),null==this.gameContainer&&(this.gameContainer=n.getObjectWithName("game-container"),null==this.gameCanvas&&(this.gameCanvas=n.getObjectWithName("game-canvas"),null==this.gameCanvasContext&&(this.gameCanvasContext=this.gameCanvas.getContext("2d"),null==this.startButton&&(this.startButton=n.getObjectWithName("start-button"),null==this.stopButton&&(this.stopButton=n.getObjectWithName("stop-button")))))))}}s.startContainer=null,s.gameContainer=null,s.gameCanvas=null,s.gameCanvasContext=null,s.startButton=null,s.stopButton=null;class a{}a.wDown=!1,a.aDown=!1,a.sDown=!1,a.dDown=!1;class o{constructor(t,e){this.w=t,this.h=e}}class l{}l.height=15,l.width=7,l.xPos=2,l.yPos=2,l.speed=.8,l.color="rgb(32,103,79)";class r{}r.loopsPerSecond=120,r.enableDebugInfo=!0;class c{static initialize(){this.isInitialized||(this.isInitialized=!0,setInterval(()=>{if(!this.doGameCycle)return;let t=this.windowRect();s.gameCanvasContext.clearRect(0,0,t.w,t.h),this.printDebugInfo(),s.gameCanvasContext.fillStyle=this.entity.color,s.gameCanvasContext.fillRect(this.entity.xPos,this.entity.yPos,this.entity.width,this.entity.height),this.animateColor(),this.updatePositions(),this.validatePositions()},1e3/r.loopsPerSecond).toFixed())}static printDebugInfo(){r.enableDebugInfo&&(s.gameCanvasContext.fillStyle="#4182ef",s.gameCanvasContext.font="14px Segoe UI",s.gameCanvasContext.fillText(`Position (${this.entity.xPos}, ${this.entity.yPos})`,20,20),s.gameCanvasContext.fillText(`Entity sizes (${this.entity.width}, ${this.entity.height})`,20,40),s.gameCanvasContext.fillText(`Loops per second ${r.loopsPerSecond}`,20,60))}static updatePositions(){a.wDown&&(this.entity.yPos+=this.entity.speed),a.aDown&&(this.entity.xPos-=this.entity.speed),a.sDown&&(this.entity.yPos-=this.entity.speed),a.dDown&&(this.entity.xPos+=this.entity.speed)}static validatePositions(){this.entity.xPos<0&&(this.entity.xPos=window.innerWidth-2),this.entity.xPos-1>window.innerWidth&&(this.entity.xPos=0),this.entity.yPos+1<0&&(this.entity.yPos=s.gameCanvas.height-this.entity.height),this.entity.yPos-1>s.gameCanvas.height&&(this.entity.yPos=0)}static animateColor(){a.wDown?this.entity.color="#5c673c":a.aDown?this.entity.color="#674f38":a.sDown?this.entity.color="#673133":a.dDown?this.entity.color="#673a5f":this.entity.color="#20674f"}static windowRect(){return new o(window.innerWidth,window.innerHeight)}}c.isInitialized=!1,c.doGameCycle=!0,c.entity=l;class h{static initialize(){this.isInitialized||(this.isInitialized=!0,this.subscribe())}static subscribe(){s.startButton.onclick=()=>this.startGameLoop(),s.stopButton.onclick=()=>this.stopGameLoop()}static startGameLoop(){this.arrangeCanvasSize(),this.switchGameState(),c.doGameCycle=!0,c.initialize()}static stopGameLoop(){c.doGameCycle=!1,this.switchGameState()}static arrangeCanvasSize(){s.gameCanvas.width=window.innerWidth,s.gameCanvas.height=window.innerHeight*this.canvasHeightPercent}static switchGameState(){n.switchVisibility(n.getObjectWithName("start-container"),n.getObjectWithName("game-container"))}}h.canvasHeightPercent=.7,h.isInitialized=!1,window.onload=()=>{s.initialize(),h.initialize(),class{static initialize(){window.onkeydown=this.handleDown,window.onkeyup=this.handleUp}static handleDown(t){"KeyW"==t.code&&(a.wDown=!0),"KeyA"==t.code&&(a.aDown=!0),"KeyS"==t.code&&(a.sDown=!0),"KeyD"==t.code&&(a.dDown=!0)}static handleUp(t){"KeyW"==t.code&&(a.wDown=!1),"KeyA"==t.code&&(a.aDown=!1),"KeyS"==t.code&&(a.sDown=!1),"KeyD"==t.code&&(a.dDown=!1)}}.initialize()},window.onresize=()=>h.arrangeCanvasSize()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,